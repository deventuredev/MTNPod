// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: CampaignProto.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct CampaignModelProto {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var id: Int64 = 0

  var name: String = String()

  var proximity: Double = 0

  var startDate: String = String()

  var endDate: String = String()

  var tokensAvailable: Int32 = 0

  var companyLogoURL: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct CampaignAdModelProto {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var imageID: Int64 = 0

  var adID: Int64 = 0

  var imageURL: String = String()

  var type: Int32 = 0

  var redirectLink: String = String()

  var displayTime: Int32 = 0

  var showTime: Int32 = 0

  var backgroundColor: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct AdDisplayedModelProto {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var playerID: Int64 = 0

  var adID: Int64 = 0

  var currentTime: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

extension CampaignModelProto: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "CampaignModelProto"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "Name"),
    3: .same(proto: "Proximity"),
    4: .same(proto: "StartDate"),
    5: .same(proto: "EndDate"),
    6: .same(proto: "TokensAvailable"),
    7: .same(proto: "CompanyLogoUrl"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt64Field(value: &self.id) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 3: try { try decoder.decodeSingularDoubleField(value: &self.proximity) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.startDate) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.endDate) }()
      case 6: try { try decoder.decodeSingularInt32Field(value: &self.tokensAvailable) }()
      case 7: try { try decoder.decodeSingularStringField(value: &self.companyLogoURL) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.id != 0 {
      try visitor.visitSingularInt64Field(value: self.id, fieldNumber: 1)
    }
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 2)
    }
    if self.proximity != 0 {
      try visitor.visitSingularDoubleField(value: self.proximity, fieldNumber: 3)
    }
    if !self.startDate.isEmpty {
      try visitor.visitSingularStringField(value: self.startDate, fieldNumber: 4)
    }
    if !self.endDate.isEmpty {
      try visitor.visitSingularStringField(value: self.endDate, fieldNumber: 5)
    }
    if self.tokensAvailable != 0 {
      try visitor.visitSingularInt32Field(value: self.tokensAvailable, fieldNumber: 6)
    }
    if !self.companyLogoURL.isEmpty {
      try visitor.visitSingularStringField(value: self.companyLogoURL, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: CampaignModelProto, rhs: CampaignModelProto) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.name != rhs.name {return false}
    if lhs.proximity != rhs.proximity {return false}
    if lhs.startDate != rhs.startDate {return false}
    if lhs.endDate != rhs.endDate {return false}
    if lhs.tokensAvailable != rhs.tokensAvailable {return false}
    if lhs.companyLogoURL != rhs.companyLogoURL {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension CampaignAdModelProto: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "CampaignAdModelProto"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "imageId"),
    2: .same(proto: "adId"),
    3: .same(proto: "imageUrl"),
    4: .same(proto: "type"),
    5: .same(proto: "redirectLink"),
    6: .same(proto: "displayTime"),
    7: .same(proto: "showTime"),
    8: .same(proto: "backgroundColor"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt64Field(value: &self.imageID) }()
      case 2: try { try decoder.decodeSingularInt64Field(value: &self.adID) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.imageURL) }()
      case 4: try { try decoder.decodeSingularInt32Field(value: &self.type) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.redirectLink) }()
      case 6: try { try decoder.decodeSingularInt32Field(value: &self.displayTime) }()
      case 7: try { try decoder.decodeSingularInt32Field(value: &self.showTime) }()
      case 8: try { try decoder.decodeSingularStringField(value: &self.backgroundColor) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.imageID != 0 {
      try visitor.visitSingularInt64Field(value: self.imageID, fieldNumber: 1)
    }
    if self.adID != 0 {
      try visitor.visitSingularInt64Field(value: self.adID, fieldNumber: 2)
    }
    if !self.imageURL.isEmpty {
      try visitor.visitSingularStringField(value: self.imageURL, fieldNumber: 3)
    }
    if self.type != 0 {
      try visitor.visitSingularInt32Field(value: self.type, fieldNumber: 4)
    }
    if !self.redirectLink.isEmpty {
      try visitor.visitSingularStringField(value: self.redirectLink, fieldNumber: 5)
    }
    if self.displayTime != 0 {
      try visitor.visitSingularInt32Field(value: self.displayTime, fieldNumber: 6)
    }
    if self.showTime != 0 {
      try visitor.visitSingularInt32Field(value: self.showTime, fieldNumber: 7)
    }
    if !self.backgroundColor.isEmpty {
      try visitor.visitSingularStringField(value: self.backgroundColor, fieldNumber: 8)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: CampaignAdModelProto, rhs: CampaignAdModelProto) -> Bool {
    if lhs.imageID != rhs.imageID {return false}
    if lhs.adID != rhs.adID {return false}
    if lhs.imageURL != rhs.imageURL {return false}
    if lhs.type != rhs.type {return false}
    if lhs.redirectLink != rhs.redirectLink {return false}
    if lhs.displayTime != rhs.displayTime {return false}
    if lhs.showTime != rhs.showTime {return false}
    if lhs.backgroundColor != rhs.backgroundColor {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension AdDisplayedModelProto: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "AdDisplayedModelProto"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "playerId"),
    2: .same(proto: "adId"),
    3: .same(proto: "currentTime"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt64Field(value: &self.playerID) }()
      case 2: try { try decoder.decodeSingularInt64Field(value: &self.adID) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.currentTime) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.playerID != 0 {
      try visitor.visitSingularInt64Field(value: self.playerID, fieldNumber: 1)
    }
    if self.adID != 0 {
      try visitor.visitSingularInt64Field(value: self.adID, fieldNumber: 2)
    }
    if !self.currentTime.isEmpty {
      try visitor.visitSingularStringField(value: self.currentTime, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: AdDisplayedModelProto, rhs: AdDisplayedModelProto) -> Bool {
    if lhs.playerID != rhs.playerID {return false}
    if lhs.adID != rhs.adID {return false}
    if lhs.currentTime != rhs.currentTime {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
