// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: InitCampaign.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct InitModelProto {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var userID: Int64 = 0

  var campaignList: [CampaignInitMinifiedProto] = []

  var isDebug: Bool = false

  var disableAr: Bool = false

  var offsetX: Int32 = 0

  var offsetY: Int32 = 0

  var take: Int32 = 0

  var defaultTimeUpdate: Int32 = 0

  var shouldGetTokensAfterClaim: Bool = false

  var allowMockLocation: Bool = false

  var urlSignalR: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct CampaignInitMinifiedProto {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var id: Int64 = 0

  var name: String = String()

  var proximity: Double = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

extension InitModelProto: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "InitModelProto"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "userId"),
    2: .same(proto: "campaignList"),
    3: .same(proto: "isDebug"),
    4: .same(proto: "disableAr"),
    5: .same(proto: "offsetX"),
    6: .same(proto: "offsetY"),
    7: .same(proto: "take"),
    8: .same(proto: "defaultTimeUpdate"),
    9: .same(proto: "shouldGetTokensAfterClaim"),
    10: .same(proto: "allowMockLocation"),
    11: .same(proto: "urlSignalR"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt64Field(value: &self.userID) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.campaignList) }()
      case 3: try { try decoder.decodeSingularBoolField(value: &self.isDebug) }()
      case 4: try { try decoder.decodeSingularBoolField(value: &self.disableAr) }()
      case 5: try { try decoder.decodeSingularInt32Field(value: &self.offsetX) }()
      case 6: try { try decoder.decodeSingularInt32Field(value: &self.offsetY) }()
      case 7: try { try decoder.decodeSingularInt32Field(value: &self.take) }()
      case 8: try { try decoder.decodeSingularInt32Field(value: &self.defaultTimeUpdate) }()
      case 9: try { try decoder.decodeSingularBoolField(value: &self.shouldGetTokensAfterClaim) }()
      case 10: try { try decoder.decodeSingularBoolField(value: &self.allowMockLocation) }()
      case 11: try { try decoder.decodeSingularStringField(value: &self.urlSignalR) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.userID != 0 {
      try visitor.visitSingularInt64Field(value: self.userID, fieldNumber: 1)
    }
    if !self.campaignList.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.campaignList, fieldNumber: 2)
    }
    if self.isDebug != false {
      try visitor.visitSingularBoolField(value: self.isDebug, fieldNumber: 3)
    }
    if self.disableAr != false {
      try visitor.visitSingularBoolField(value: self.disableAr, fieldNumber: 4)
    }
    if self.offsetX != 0 {
      try visitor.visitSingularInt32Field(value: self.offsetX, fieldNumber: 5)
    }
    if self.offsetY != 0 {
      try visitor.visitSingularInt32Field(value: self.offsetY, fieldNumber: 6)
    }
    if self.take != 0 {
      try visitor.visitSingularInt32Field(value: self.take, fieldNumber: 7)
    }
    if self.defaultTimeUpdate != 0 {
      try visitor.visitSingularInt32Field(value: self.defaultTimeUpdate, fieldNumber: 8)
    }
    if self.shouldGetTokensAfterClaim != false {
      try visitor.visitSingularBoolField(value: self.shouldGetTokensAfterClaim, fieldNumber: 9)
    }
    if self.allowMockLocation != false {
      try visitor.visitSingularBoolField(value: self.allowMockLocation, fieldNumber: 10)
    }
    if !self.urlSignalR.isEmpty {
      try visitor.visitSingularStringField(value: self.urlSignalR, fieldNumber: 11)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: InitModelProto, rhs: InitModelProto) -> Bool {
    if lhs.userID != rhs.userID {return false}
    if lhs.campaignList != rhs.campaignList {return false}
    if lhs.isDebug != rhs.isDebug {return false}
    if lhs.disableAr != rhs.disableAr {return false}
    if lhs.offsetX != rhs.offsetX {return false}
    if lhs.offsetY != rhs.offsetY {return false}
    if lhs.take != rhs.take {return false}
    if lhs.defaultTimeUpdate != rhs.defaultTimeUpdate {return false}
    if lhs.shouldGetTokensAfterClaim != rhs.shouldGetTokensAfterClaim {return false}
    if lhs.allowMockLocation != rhs.allowMockLocation {return false}
    if lhs.urlSignalR != rhs.urlSignalR {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension CampaignInitMinifiedProto: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "CampaignInitMinifiedProto"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "name"),
    3: .same(proto: "proximity"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt64Field(value: &self.id) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 3: try { try decoder.decodeSingularDoubleField(value: &self.proximity) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.id != 0 {
      try visitor.visitSingularInt64Field(value: self.id, fieldNumber: 1)
    }
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 2)
    }
    if self.proximity != 0 {
      try visitor.visitSingularDoubleField(value: self.proximity, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: CampaignInitMinifiedProto, rhs: CampaignInitMinifiedProto) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.name != rhs.name {return false}
    if lhs.proximity != rhs.proximity {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
