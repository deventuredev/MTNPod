// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: MapToken.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct GetTokensModelProto {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var playerID: Int64 = 0

  var latitude: Double = 0

  var longitude: Double = 0

  var campaignIDList: [Int64] = []

  var latestUpdate: String = String()

  var sessionID: Int64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct MapTokenTypeProtoList {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var values: [MapTokenTypeProtoModel] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct MapTokenTypeProtoModel {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var id: Int64 = 0

  var campaignID: Int64 = 0

  var name: String = String()

  var imageURL: String = String()

  var minifiedTokenList: [MinifiedMapTokenProtoModel] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct MinifiedMapTokenProtoModel {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var id: Int64 = 0

  var groupID: Int64 = 0

  var latitude: Double = 0

  var longitude: Double = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct TokenTypeDetailsModelProto {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var id: Int64 = 0

  var name: String = String()

  var message: String = String()

  var imageURL: String = String()

  var redeemType: Int32 = 0

  var promotionDescription: String = String()

  var redemtionRules: String = String()

  var companyLogoURL: String = String()

  var promotionImageURL: String = String()

  var qrContent: String = String()

  var status: Int32 = 0

  var campaignID: Int64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct TokenTypeModelProto {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var id: Int64 = 0

  var name: String = String()

  var campaignNames: [String] = []

  var tokenImageURL: String = String()

  var rewardType: Int32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct ClaimModelProto {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var tokenID: Int64 = 0

  var userID: Int64 = 0

  var campaignID: Int64 = 0

  var tokenTypeID: Int64 = 0

  var sessionID: Int64 = 0

  var groupID: Int64 = 0

  var playerLatitude: Double = 0

  var playerLongitude: Double = 0

  var tokenLatitude: Double = 0

  var tokenLongitude: Double = 0

  var claimedAt: String = String()

  var campaignProximity: Int32 = 0

  var clientID: Int64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct GetAllTokensModelProto {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var userID: Int64 = 0

  var campaignIDList: [Int64] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct TokenTypeByIdModel {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var id: Int64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

extension GetTokensModelProto: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "GetTokensModelProto"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "player_id"),
    2: .same(proto: "latitude"),
    3: .same(proto: "longitude"),
    4: .standard(proto: "campaign_id_list"),
    5: .standard(proto: "latest_update"),
    6: .standard(proto: "session_id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt64Field(value: &self.playerID) }()
      case 2: try { try decoder.decodeSingularDoubleField(value: &self.latitude) }()
      case 3: try { try decoder.decodeSingularDoubleField(value: &self.longitude) }()
      case 4: try { try decoder.decodeRepeatedInt64Field(value: &self.campaignIDList) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.latestUpdate) }()
      case 6: try { try decoder.decodeSingularInt64Field(value: &self.sessionID) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.playerID != 0 {
      try visitor.visitSingularInt64Field(value: self.playerID, fieldNumber: 1)
    }
    if self.latitude != 0 {
      try visitor.visitSingularDoubleField(value: self.latitude, fieldNumber: 2)
    }
    if self.longitude != 0 {
      try visitor.visitSingularDoubleField(value: self.longitude, fieldNumber: 3)
    }
    if !self.campaignIDList.isEmpty {
      try visitor.visitPackedInt64Field(value: self.campaignIDList, fieldNumber: 4)
    }
    if !self.latestUpdate.isEmpty {
      try visitor.visitSingularStringField(value: self.latestUpdate, fieldNumber: 5)
    }
    if self.sessionID != 0 {
      try visitor.visitSingularInt64Field(value: self.sessionID, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GetTokensModelProto, rhs: GetTokensModelProto) -> Bool {
    if lhs.playerID != rhs.playerID {return false}
    if lhs.latitude != rhs.latitude {return false}
    if lhs.longitude != rhs.longitude {return false}
    if lhs.campaignIDList != rhs.campaignIDList {return false}
    if lhs.latestUpdate != rhs.latestUpdate {return false}
    if lhs.sessionID != rhs.sessionID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension MapTokenTypeProtoList: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "MapTokenTypeProtoList"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "values"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.values) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.values.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.values, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: MapTokenTypeProtoList, rhs: MapTokenTypeProtoList) -> Bool {
    if lhs.values != rhs.values {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension MapTokenTypeProtoModel: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "MapTokenTypeProtoModel"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .standard(proto: "campaign_id"),
    3: .same(proto: "name"),
    4: .standard(proto: "image_url"),
    5: .same(proto: "minifiedTokenList"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt64Field(value: &self.id) }()
      case 2: try { try decoder.decodeSingularInt64Field(value: &self.campaignID) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.imageURL) }()
      case 5: try { try decoder.decodeRepeatedMessageField(value: &self.minifiedTokenList) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.id != 0 {
      try visitor.visitSingularInt64Field(value: self.id, fieldNumber: 1)
    }
    if self.campaignID != 0 {
      try visitor.visitSingularInt64Field(value: self.campaignID, fieldNumber: 2)
    }
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 3)
    }
    if !self.imageURL.isEmpty {
      try visitor.visitSingularStringField(value: self.imageURL, fieldNumber: 4)
    }
    if !self.minifiedTokenList.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.minifiedTokenList, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: MapTokenTypeProtoModel, rhs: MapTokenTypeProtoModel) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.campaignID != rhs.campaignID {return false}
    if lhs.name != rhs.name {return false}
    if lhs.imageURL != rhs.imageURL {return false}
    if lhs.minifiedTokenList != rhs.minifiedTokenList {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension MinifiedMapTokenProtoModel: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "MinifiedMapTokenProtoModel"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .standard(proto: "group_id"),
    3: .same(proto: "latitude"),
    4: .same(proto: "longitude"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt64Field(value: &self.id) }()
      case 2: try { try decoder.decodeSingularInt64Field(value: &self.groupID) }()
      case 3: try { try decoder.decodeSingularDoubleField(value: &self.latitude) }()
      case 4: try { try decoder.decodeSingularDoubleField(value: &self.longitude) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.id != 0 {
      try visitor.visitSingularInt64Field(value: self.id, fieldNumber: 1)
    }
    if self.groupID != 0 {
      try visitor.visitSingularInt64Field(value: self.groupID, fieldNumber: 2)
    }
    if self.latitude != 0 {
      try visitor.visitSingularDoubleField(value: self.latitude, fieldNumber: 3)
    }
    if self.longitude != 0 {
      try visitor.visitSingularDoubleField(value: self.longitude, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: MinifiedMapTokenProtoModel, rhs: MinifiedMapTokenProtoModel) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.groupID != rhs.groupID {return false}
    if lhs.latitude != rhs.latitude {return false}
    if lhs.longitude != rhs.longitude {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TokenTypeDetailsModelProto: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "TokenTypeDetailsModelProto"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "name"),
    3: .same(proto: "message"),
    4: .same(proto: "imageUrl"),
    5: .same(proto: "redeemType"),
    6: .same(proto: "promotionDescription"),
    7: .same(proto: "redemtionRules"),
    8: .same(proto: "companyLogoUrl"),
    9: .same(proto: "promotionImageUrl"),
    10: .same(proto: "qrContent"),
    11: .same(proto: "status"),
    12: .same(proto: "campaignId"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt64Field(value: &self.id) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.message) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.imageURL) }()
      case 5: try { try decoder.decodeSingularInt32Field(value: &self.redeemType) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.promotionDescription) }()
      case 7: try { try decoder.decodeSingularStringField(value: &self.redemtionRules) }()
      case 8: try { try decoder.decodeSingularStringField(value: &self.companyLogoURL) }()
      case 9: try { try decoder.decodeSingularStringField(value: &self.promotionImageURL) }()
      case 10: try { try decoder.decodeSingularStringField(value: &self.qrContent) }()
      case 11: try { try decoder.decodeSingularInt32Field(value: &self.status) }()
      case 12: try { try decoder.decodeSingularInt64Field(value: &self.campaignID) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.id != 0 {
      try visitor.visitSingularInt64Field(value: self.id, fieldNumber: 1)
    }
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 2)
    }
    if !self.message.isEmpty {
      try visitor.visitSingularStringField(value: self.message, fieldNumber: 3)
    }
    if !self.imageURL.isEmpty {
      try visitor.visitSingularStringField(value: self.imageURL, fieldNumber: 4)
    }
    if self.redeemType != 0 {
      try visitor.visitSingularInt32Field(value: self.redeemType, fieldNumber: 5)
    }
    if !self.promotionDescription.isEmpty {
      try visitor.visitSingularStringField(value: self.promotionDescription, fieldNumber: 6)
    }
    if !self.redemtionRules.isEmpty {
      try visitor.visitSingularStringField(value: self.redemtionRules, fieldNumber: 7)
    }
    if !self.companyLogoURL.isEmpty {
      try visitor.visitSingularStringField(value: self.companyLogoURL, fieldNumber: 8)
    }
    if !self.promotionImageURL.isEmpty {
      try visitor.visitSingularStringField(value: self.promotionImageURL, fieldNumber: 9)
    }
    if !self.qrContent.isEmpty {
      try visitor.visitSingularStringField(value: self.qrContent, fieldNumber: 10)
    }
    if self.status != 0 {
      try visitor.visitSingularInt32Field(value: self.status, fieldNumber: 11)
    }
    if self.campaignID != 0 {
      try visitor.visitSingularInt64Field(value: self.campaignID, fieldNumber: 12)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TokenTypeDetailsModelProto, rhs: TokenTypeDetailsModelProto) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.name != rhs.name {return false}
    if lhs.message != rhs.message {return false}
    if lhs.imageURL != rhs.imageURL {return false}
    if lhs.redeemType != rhs.redeemType {return false}
    if lhs.promotionDescription != rhs.promotionDescription {return false}
    if lhs.redemtionRules != rhs.redemtionRules {return false}
    if lhs.companyLogoURL != rhs.companyLogoURL {return false}
    if lhs.promotionImageURL != rhs.promotionImageURL {return false}
    if lhs.qrContent != rhs.qrContent {return false}
    if lhs.status != rhs.status {return false}
    if lhs.campaignID != rhs.campaignID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TokenTypeModelProto: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "TokenTypeModelProto"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "name"),
    3: .same(proto: "campaignNames"),
    4: .same(proto: "tokenImageURL"),
    5: .same(proto: "rewardType"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt64Field(value: &self.id) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 3: try { try decoder.decodeRepeatedStringField(value: &self.campaignNames) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.tokenImageURL) }()
      case 5: try { try decoder.decodeSingularInt32Field(value: &self.rewardType) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.id != 0 {
      try visitor.visitSingularInt64Field(value: self.id, fieldNumber: 1)
    }
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 2)
    }
    if !self.campaignNames.isEmpty {
      try visitor.visitRepeatedStringField(value: self.campaignNames, fieldNumber: 3)
    }
    if !self.tokenImageURL.isEmpty {
      try visitor.visitSingularStringField(value: self.tokenImageURL, fieldNumber: 4)
    }
    if self.rewardType != 0 {
      try visitor.visitSingularInt32Field(value: self.rewardType, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TokenTypeModelProto, rhs: TokenTypeModelProto) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.name != rhs.name {return false}
    if lhs.campaignNames != rhs.campaignNames {return false}
    if lhs.tokenImageURL != rhs.tokenImageURL {return false}
    if lhs.rewardType != rhs.rewardType {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ClaimModelProto: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "ClaimModelProto"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "tokenId"),
    2: .same(proto: "userId"),
    3: .same(proto: "campaignId"),
    4: .same(proto: "tokenTypeId"),
    5: .same(proto: "sessionId"),
    6: .same(proto: "groupId"),
    7: .same(proto: "playerLatitude"),
    8: .same(proto: "playerLongitude"),
    9: .same(proto: "tokenLatitude"),
    10: .same(proto: "tokenLongitude"),
    11: .same(proto: "claimedAt"),
    12: .same(proto: "campaignProximity"),
    13: .same(proto: "clientId"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt64Field(value: &self.tokenID) }()
      case 2: try { try decoder.decodeSingularInt64Field(value: &self.userID) }()
      case 3: try { try decoder.decodeSingularInt64Field(value: &self.campaignID) }()
      case 4: try { try decoder.decodeSingularInt64Field(value: &self.tokenTypeID) }()
      case 5: try { try decoder.decodeSingularInt64Field(value: &self.sessionID) }()
      case 6: try { try decoder.decodeSingularInt64Field(value: &self.groupID) }()
      case 7: try { try decoder.decodeSingularDoubleField(value: &self.playerLatitude) }()
      case 8: try { try decoder.decodeSingularDoubleField(value: &self.playerLongitude) }()
      case 9: try { try decoder.decodeSingularDoubleField(value: &self.tokenLatitude) }()
      case 10: try { try decoder.decodeSingularDoubleField(value: &self.tokenLongitude) }()
      case 11: try { try decoder.decodeSingularStringField(value: &self.claimedAt) }()
      case 12: try { try decoder.decodeSingularInt32Field(value: &self.campaignProximity) }()
      case 13: try { try decoder.decodeSingularInt64Field(value: &self.clientID) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.tokenID != 0 {
      try visitor.visitSingularInt64Field(value: self.tokenID, fieldNumber: 1)
    }
    if self.userID != 0 {
      try visitor.visitSingularInt64Field(value: self.userID, fieldNumber: 2)
    }
    if self.campaignID != 0 {
      try visitor.visitSingularInt64Field(value: self.campaignID, fieldNumber: 3)
    }
    if self.tokenTypeID != 0 {
      try visitor.visitSingularInt64Field(value: self.tokenTypeID, fieldNumber: 4)
    }
    if self.sessionID != 0 {
      try visitor.visitSingularInt64Field(value: self.sessionID, fieldNumber: 5)
    }
    if self.groupID != 0 {
      try visitor.visitSingularInt64Field(value: self.groupID, fieldNumber: 6)
    }
    if self.playerLatitude != 0 {
      try visitor.visitSingularDoubleField(value: self.playerLatitude, fieldNumber: 7)
    }
    if self.playerLongitude != 0 {
      try visitor.visitSingularDoubleField(value: self.playerLongitude, fieldNumber: 8)
    }
    if self.tokenLatitude != 0 {
      try visitor.visitSingularDoubleField(value: self.tokenLatitude, fieldNumber: 9)
    }
    if self.tokenLongitude != 0 {
      try visitor.visitSingularDoubleField(value: self.tokenLongitude, fieldNumber: 10)
    }
    if !self.claimedAt.isEmpty {
      try visitor.visitSingularStringField(value: self.claimedAt, fieldNumber: 11)
    }
    if self.campaignProximity != 0 {
      try visitor.visitSingularInt32Field(value: self.campaignProximity, fieldNumber: 12)
    }
    if self.clientID != 0 {
      try visitor.visitSingularInt64Field(value: self.clientID, fieldNumber: 13)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ClaimModelProto, rhs: ClaimModelProto) -> Bool {
    if lhs.tokenID != rhs.tokenID {return false}
    if lhs.userID != rhs.userID {return false}
    if lhs.campaignID != rhs.campaignID {return false}
    if lhs.tokenTypeID != rhs.tokenTypeID {return false}
    if lhs.sessionID != rhs.sessionID {return false}
    if lhs.groupID != rhs.groupID {return false}
    if lhs.playerLatitude != rhs.playerLatitude {return false}
    if lhs.playerLongitude != rhs.playerLongitude {return false}
    if lhs.tokenLatitude != rhs.tokenLatitude {return false}
    if lhs.tokenLongitude != rhs.tokenLongitude {return false}
    if lhs.claimedAt != rhs.claimedAt {return false}
    if lhs.campaignProximity != rhs.campaignProximity {return false}
    if lhs.clientID != rhs.clientID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GetAllTokensModelProto: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "GetAllTokensModelProto"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "userId"),
    2: .same(proto: "campaignIdList"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt64Field(value: &self.userID) }()
      case 2: try { try decoder.decodeRepeatedInt64Field(value: &self.campaignIDList) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.userID != 0 {
      try visitor.visitSingularInt64Field(value: self.userID, fieldNumber: 1)
    }
    if !self.campaignIDList.isEmpty {
      try visitor.visitPackedInt64Field(value: self.campaignIDList, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GetAllTokensModelProto, rhs: GetAllTokensModelProto) -> Bool {
    if lhs.userID != rhs.userID {return false}
    if lhs.campaignIDList != rhs.campaignIDList {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TokenTypeByIdModel: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "TokenTypeByIdModel"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt64Field(value: &self.id) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.id != 0 {
      try visitor.visitSingularInt64Field(value: self.id, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TokenTypeByIdModel, rhs: TokenTypeByIdModel) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
