// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: SessionProto.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct StartSessionGetModelProto {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var sessionID: Int64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct EndSessionModelProto {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var playerID: Int64 = 0

  var sessionID: Int64 = 0

  var currentTime: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct StartSessionModelProto {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var clientID: Int64 = 0

  var playerID: Int64 = 0

  var campaignIDList: [Int64] = []

  var latitude: Double = 0

  var longitude: Double = 0

  var currentTime: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

extension StartSessionGetModelProto: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "StartSessionGetModelProto"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "sessionId"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt64Field(value: &self.sessionID) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.sessionID != 0 {
      try visitor.visitSingularInt64Field(value: self.sessionID, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: StartSessionGetModelProto, rhs: StartSessionGetModelProto) -> Bool {
    if lhs.sessionID != rhs.sessionID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension EndSessionModelProto: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "EndSessionModelProto"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "playerId"),
    2: .same(proto: "sessionId"),
    3: .same(proto: "currentTime"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt64Field(value: &self.playerID) }()
      case 2: try { try decoder.decodeSingularInt64Field(value: &self.sessionID) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.currentTime) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.playerID != 0 {
      try visitor.visitSingularInt64Field(value: self.playerID, fieldNumber: 1)
    }
    if self.sessionID != 0 {
      try visitor.visitSingularInt64Field(value: self.sessionID, fieldNumber: 2)
    }
    if !self.currentTime.isEmpty {
      try visitor.visitSingularStringField(value: self.currentTime, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: EndSessionModelProto, rhs: EndSessionModelProto) -> Bool {
    if lhs.playerID != rhs.playerID {return false}
    if lhs.sessionID != rhs.sessionID {return false}
    if lhs.currentTime != rhs.currentTime {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension StartSessionModelProto: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "StartSessionModelProto"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "clientId"),
    2: .same(proto: "playerId"),
    3: .same(proto: "campaignIdList"),
    4: .same(proto: "latitude"),
    5: .same(proto: "longitude"),
    6: .same(proto: "currentTime"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt64Field(value: &self.clientID) }()
      case 2: try { try decoder.decodeSingularInt64Field(value: &self.playerID) }()
      case 3: try { try decoder.decodeRepeatedInt64Field(value: &self.campaignIDList) }()
      case 4: try { try decoder.decodeSingularDoubleField(value: &self.latitude) }()
      case 5: try { try decoder.decodeSingularDoubleField(value: &self.longitude) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.currentTime) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.clientID != 0 {
      try visitor.visitSingularInt64Field(value: self.clientID, fieldNumber: 1)
    }
    if self.playerID != 0 {
      try visitor.visitSingularInt64Field(value: self.playerID, fieldNumber: 2)
    }
    if !self.campaignIDList.isEmpty {
      try visitor.visitPackedInt64Field(value: self.campaignIDList, fieldNumber: 3)
    }
    if self.latitude != 0 {
      try visitor.visitSingularDoubleField(value: self.latitude, fieldNumber: 4)
    }
    if self.longitude != 0 {
      try visitor.visitSingularDoubleField(value: self.longitude, fieldNumber: 5)
    }
    if !self.currentTime.isEmpty {
      try visitor.visitSingularStringField(value: self.currentTime, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: StartSessionModelProto, rhs: StartSessionModelProto) -> Bool {
    if lhs.clientID != rhs.clientID {return false}
    if lhs.playerID != rhs.playerID {return false}
    if lhs.campaignIDList != rhs.campaignIDList {return false}
    if lhs.latitude != rhs.latitude {return false}
    if lhs.longitude != rhs.longitude {return false}
    if lhs.currentTime != rhs.currentTime {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
